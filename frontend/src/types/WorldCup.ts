// 월드컵 타입스크립트
// ex) id?: number; ? <- 이거붙은거 필수파라미터아님 널허용과 같음

// 1. 월드컵 참가자 (Backend WorldCupParticipantDTO)
export interface WorldCupParticipant {
    id: number;
    name: string;
    koreanName: string;
    types: string[];               // 수정: type → types
    spriteUrl: string;
    description?: string;          // 수정: 선택사항으로 변경
    generation: number;            // 응답: Integer (1, 2, 3...)

    // 월드컵 진행중 정보
    rank?: number;
    wins?: number;
    totalMatches?: number;
    winRate?: number;

    // 통계정보 (선택사항)
    totalParticipations?: number;
    totalWins?: number;
    averageRank?: number;
}

// 2. 월드컵 요청 (백엔드 WorldCupRequestDTO)
export interface WorldCupRequest {
    title: string;
    tournamentType?: string;       // 기본값: "vote"

    // 조건 설정
    participantCount?: number;     // 기본값: 16, 수정: participantsCount → participantCount
    generation?: string;           // 요청: String ("1", "2", "all")
    type?: string;

    // 추가조건 (선택사항)
    additionalConditions?: Record<string, any>;

    // 자동생성 여부
    isAutoGenerated?: boolean;
}

// 3. 자동 월드컵 요청 (백엔드 AutoWorldCupRequestDTO)
export interface AutoWorldCupRequest {
    title: string;

    // 조건설정
    generation?: string;           // 요청: String ("1", "2", "all")
    type?: string;
    participantCount?: number;
    
    // 선택방법 설정
    selectionMethod?: string;
    includeRandom?: boolean;
    randomCount?: number;

    // 통계기준 설정
    sortBy?: string;
    topCount?: number;
}

// 4. 월드컵 통계 (백엔드 WorldCupStatisticsDTO)
export interface WorldCupStatistics {
    id: number;
    pokemonId: number;

    // 포켓몬 기본정보
    pokemonName: string;
    pokemonKoreanName: string;
    spriteUrl: string;
    types: string[];
    generation: number;            // 응답: Integer (1, 2, 3...)

    // 통계정보
    totalParticipations: number;   // 수정: totla → total
    totalWins: number;
    totalTop3: number;
    averageRank: number;

    // 계산된 통계
    winRate: number;
    top3Rate: number;

    // 마지막 업데이트 시간
    lastUpdated: string;
}

// 5. 월드컵 결과 (백엔드 WorldCupResultDTO)
export interface WorldCupResult {
    id?: number;
    tournamentId: string;
    title: string;
    tournamentType: string;

    // Json 형태로 저장된 조건들
    conditions?: Record<string, any>;

    // 참가자 목록
    participants?: WorldCupParticipant[];

    // 최종 순위
    finalRanking?: any[];

    // 우승자 정보
    winnerId: number;
    winnerName?: string;
    winnerKoreanName?: string;
    winnerSpriteUrl?: string;

    // 생성 완료 시간
    createdAt: string;
    completedAt: string;
}

// 6. API 엔드포인트 타입
export interface WorldCupApiEndpoints {
    // 참가자 조회
    selectParticipants: (request: WorldCupRequest) => Promise<WorldCupParticipant[]>;

    // 자동 월드컵 생성
    createAutoWorldCup: (request: AutoWorldCupRequest) => Promise<WorldCupResult>; // 수정: WorldCupParticipant → WorldCupResult (자동생성 결과는 월드컵 결과 객체를 반환)

    // 결과 저장
    saveWorldCupResult: (result: WorldCupResult) => Promise<WorldCupResult>;

    // 특정 결과 조회
    getWorldCupResult: (tournamentId: string) => Promise<WorldCupResult>;

    // 최근결과 목록
    getRecentWorldCupResults: (limit?: number) => Promise<WorldCupResult[]>;

    // 통계 조회
    getStatisticsByGeneration: (generation: number) => Promise<WorldCupStatistics[]>;
    getStatisticsByType: (type: string) => Promise<WorldCupStatistics[]>;
    getStatisticsByGenerationAndType: (generation: number, type: string) => Promise<WorldCupStatistics[]>;
}

// 7. 유틸리티 타입
export type TournamentType = 'vote' | 'battle' | 'random';  // 수정: randem → random
export type SelectionMethod = 'top3_random' | 'top_rank' | 'top_wins';  // 수정: top_random → top3_random
export type SortBy = 'averageRank' | 'totalWins' | 'totalTop3';