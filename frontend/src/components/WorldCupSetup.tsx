import React, { useState, useEffect } from 'react';
import type { WorldCupRequest, TournamentType } from '../types/WorldCup';

// 인터페이스 정의
interface WorldCupSetupProps {
    onStart: (request: WorldCupRequest) => void;
    isLoading?: boolean;
    error?: string;
}

const WorldCupSetup = ({ onStart, isLoading = false }: WorldCupSetupProps) => {
    // 폼데이터 관리 상태
    const [formData, setFormData] = useState<WorldCupRequest>({
        title: '',
        tournamentType: 'vote',
        participantCount: 16,
        generation: 'all',
        type: '',
        isAutoGenerated: false
    });

    // 에러상태관리
    const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({});

    const generationOptions = [
        { value: 'all', label: '전체세대' },
        { value: '1', label: '1세대' },
        { value: '2', label: '2세대' },
        { value: '3', label: '3세대' },
        { value: '4', label: '4세대' },
        { value: '5', label: '5세대' },
        { value: '6', label: '6세대' },
        { value: '7', label: '7세대' },
        { value: '8', label: '8세대' },
        { value: '9', label: '9세대' },
        { value: '10', label: '10세대' },
    ];

    // 포켓몬 타입 선택 옵션 배열
    const typeOptions = [
        { value: '', label: '전체 타입' },
        { value: 'normal', label: '노말' },
        { value: 'fire', label: '불꽃' },
        { value: 'water', label: '물' },
        { value: 'electric', label: '전기' },
        { value: 'grass', label: '풀' },
        { value: 'ice', label: '얼음' },
        { value: 'fighting', label: '격투' },
        { value: 'poison', label: '독' },
        { value: 'ground', label: '땅' },
        { value: 'flying', label: '비행' },
        { value: 'psychic', label: '에스퍼' },
        { value: 'bug', label: '벌레' },
        { value: 'rock', label: '바위' },
        { value: 'ghost', label: '고스트' },
        { value: 'dragon', label: '드래곤' },
        { value: 'dark', label: '악' },
        { value: 'steel', label: '강철' },
        { value: 'fairy', label: '페어리' }
    ];

    // 자동 제목 생성 함수
    const generateTitle = (data: WorldCupRequest): string => {
        const generation = data.generation === 'all' ? '전체' : `${data.generation}세대`;
        const type = data.type ? `${data.type} 타입` : '';
        return `${generation} ${type} 포켓몬 월드컵`.trim();
    };

    // 세대나 타입이 변경 될 떄마다 제목 업데이트
    useEffect(() => {
        const title = generateTitle(formData);
        setFormData(prev => ({ ...prev, title }));
    }, [formData.generation, formData.type]);

    // 입력값 변경을 처리하는 함수
    const handleInputChange = (field: keyof WorldCupRequest, value: any) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));

        if (fieldErrors[field]){
            setFieldErrors(prev => ({
                ...prev,
                [field]:''
            }));
        }
    };

    const validateForm =(): boolean => {
        const newErrors: Record<string, string> ={};

        //참가자 검증
        if (![8, 16 ,32 ,64].includes(formData.participantCount!)) {
            newErrors.participantCount = '참가자 수는 8, 16, 32, 64 중 하나여야 합니다.';
        }
       // 세대 검증
       if (!['all', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'].includes(formData.generation!)) {
        newErrors.generation = '세대는 전체, 1~10세대 중 하나여야 합니다.';
    }

        // 타입 검증 (선택사항이지만 선택했다면 유효한지 확인)
        if (formData.type && !['normal', 'fire', 'water', 'electric', 'grass', 'ice', 'fighting', 'poison', 'ground', 'flying', 'psychic', 'bug', 'rock', 'ghost', 'dragon', 'dark', 'steel', 'fairy'].includes(formData.type)) {
            newErrors.type = '유효하지 않은 타입입니다.';
        }

        //토너먼트 타입 검증
        if (!['vote', 'random'].includes(formData.tournamentType!)) {
            newErrors.tournamentType = '토너먼트 방식은 투표 또는 랜덤 중 하나여야 합니다.';
        }

        setFieldErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }


    // 폼제출 처리 함수 submit
    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        const finalTitle = generateTitle(formData);
        const finalFormData = {
            ...formData,
            title: finalTitle
        };

        onStart(finalFormData);
    };


    // JSX 반환
    return (
        <div className="worldcup-setup">
            <div className="setup-header">
                <h2>포켓몬 월드컵 설정</h2>
                <p>월드컵에 참가할 포켓몬들을 설정해주세요.</p>
            </div>

            <form onSubmit={handleSubmit} className="setup-form">
                {/* 제목표시 (읽기전용) */}
                <div className="form-group">
                    <label>월드컵 제목</label>
                    <div className="title-display">
                        {formData.title || '설정을 완료하면 제목이 자동 생성됩니다'}
                    </div>
                </div>
                {/* 참가자 수 */}
                <div className="form-group">
                    <label htmlFor="participantCount">참가자 수</label>
                    <select
                        id="participantCount"
                        value={formData.participantCount}
                        onChange={(e) => handleInputChange('participantCount', parseInt(e.target.value))}
                        >
                        {[8, 16, 32, 64].map(count => (
                            <option key={count} value={count}>{count}마리</option>
                        ))}
                    </select>                 
                </div>
                {/* 세대 선택 */}
                <div className="form-group">
                    <label htmlFor="generation">세대</label>
                    <select
                        id="generation"
                        value={formData.generation}
                        onChange={(e) => handleInputChange('generation', e.target.value)}
                    >
                            {generationOptions.map(option => (
                                <option key={option.value} value={option.value}>{option.label}</option>
                            ))}
                        </select>
                </div>
                {/* 타입 선택 */}
                <div className="form-group">
                    <label htmlFor="type">타입 (선택사항)</label>
                    <select
                        id="type"
                        value={formData.type}
                        onChange={(e) => handleInputChange('type', e.target.value)}
                    >
                            {typeOptions.map(option => (
                                <option key={option.value} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>
                </div>
                {/* 토너먼트 타입 */}
                <div className="form-group">
                    <label htmlFor="tournamentType">토너먼트 방식</label>
                    <select
                        id="tournamentType"
                        value={formData.tournamentType}
                        onChange={(e) => handleInputChange('tournamentType', e.target.value as TournamentType)}
                    >
                        <option value="vote">투표 방식</option>
                        <option value="random">랜덤 방식</option>
                        </select>
                </div>
                {/* 시작 버튼 */}
                <div className="form-actions">
                    <button
                    type="submit"
                    className="start-button"
                    disabled={isLoading}
                    >
                        {isLoading ? '준비 중...' : '월드컵 시작하기'}
                    </button>
                </div>

            </form>
        </div>

    );
};

export default WorldCupSetup;